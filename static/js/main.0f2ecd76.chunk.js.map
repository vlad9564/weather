{"version":3,"sources":["weather_icons/cloud_sun_1.svg","iconfinder_weather01_4102328.svg","weather_icons/normal_nihght.svg","weather_icons/heart.svg","App.js","serviceWorker.js","containers/MainPage.js","utils/Constants.js","index.js"],"names":["module","exports","__webpack_require__","p","Component","Boolean","window","location","hostname","match","MainPage","props","state","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","select","React","createRef","isLoaded","items","data","icon","currently","normal_night","summary","temperature","event","detail","item","innerHTML","setState","heart","cloud_sun_1","_this2","current","addEventListener","changeLocation","fetch","then","res","json","result","console","table","newSate","prepareData","error","react_default","a","createElement","profile","primary-title","secondary-title","logo","style","display","width","id","ref","type","description","marginTop","marginRight","marginBottom","marginLeft","src","alt","ReactDOM","render","containers_MainPage","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6ECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sQCMtBC,YCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kHCgISC,6CAlIX,SAAAA,EAAYC,EAAOC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IAGtBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAML,EAAOC,KACRQ,OAASC,IAAMC,YACpBT,EAAKD,MAAQ,CACTW,UAAU,EACVC,MAAO,QAPWX,2EAUdY,GACR,IAAIC,EACJ,OAAQD,EAAKE,UAAUD,MACnB,IAAK,cACDA,EAAOE,IAYf,MANc,CACVL,UAAU,EACVC,MAAOC,EAAKE,UAAUE,QACtBH,KAAMA,EACNI,YAAaL,EAAKE,UAAUG,oDAMrBC,GAGM,WAFFA,EAAMC,OAAOC,KAAKC,UAI7BlB,KAAKmB,SAAS,CACVZ,UAAU,EACVC,MAAO,qBACPE,KAAMU,IACNN,YAAa,WAIjBd,KAAKmB,SAAS,CACVZ,UAAU,EACVC,MAAO,iCACPE,KAAMW,IACNP,YAAa,iDAKL,IAAAQ,EAAAtB,KAEhBA,KAAKI,OAAOmB,QAAQC,iBAAiB,YAAa,SAAAT,GAC9CO,EAAKG,eAAeV,KAOxBW,MADY,+IAEPC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KACG,SAACG,GAEGC,QAAQC,MAAMF,GACd,IAAIG,EAAUX,EAAKY,YAAYJ,GAC/BR,EAAKH,SAASc,IAKlB,SAACE,GAEGb,EAAKH,SAAS,CACVZ,UAAU,EACV4B,6CAQhB,OACIC,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,gBACIC,QC1GQ,8LD2GRC,gBAAc,sBACdC,kBAAgB,gBAChBC,KAAMrB,MAIVe,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAAEC,QAAS,gBACnBR,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CACRE,MAAO,QAEPT,EAAAC,EAAAC,cAAA,YAAUQ,GAAG,SAASC,IAAK/C,KAAKI,QAC5BgC,EAAAC,EAAAC,cAAA,UAAQ5B,KAAK,iCAAiCsC,KAAK,SAASC,YAAY,mBAAxE,UACAb,EAAAC,EAAAC,cAAA,UAAQ5B,KAAK,iCAAiCsC,KAAK,SAASC,YAAY,qBAAxE,cACAb,EAAAC,EAAAC,cAAA,UAAQ5B,KAAK,iCAAiCsC,KAAK,SAASC,YAAY,iBAAxE,YACAb,EAAAC,EAAAC,cAAA,UAAQ5B,KAAK,iCAAiCsC,KAAK,SAASC,YAAY,iBAAxE,eACAb,EAAAC,EAAAC,cAAA,UAAQ5B,KAAK,iCAAiCsC,KAAK,SAASC,YAAY,aAAxE,aACAb,EAAAC,EAAAC,cAAA,UAAQ5B,KAAK,iCAAiCsC,KAAK,SAASC,YAAY,aAAxE,YAMRb,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAERO,UAAW,OACXC,YAAa,OACbC,aAAc,OACdC,WAAY,QAEZjB,EAAAC,EAAAC,cAAA,+BAAuBtC,KAAKJ,MAAMY,OAClC4B,EAAAC,EAAAC,cAAA,OAAKgB,IAAKtD,KAAKJ,MAAMc,KAAM6C,IAAI,SAC/BnB,EAAAC,EAAAC,cAAA,4BAAoBtC,KAAKJ,MAAMkB,YAA/B,oBA7HD1B,cENvBoE,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAAcC,SAASC,eAAe,SH0HhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.0f2ecd76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cloud_sun_1.8d2c0b2d.svg\";","module.exports = __webpack_public_path__ + \"static/media/iconfinder_weather01_4102328.3077681e.svg\";","module.exports = __webpack_public_path__ + \"static/media/normal_nihght.5a81a676.svg\";","module.exports = __webpack_public_path__ + \"static/media/heart.6739aca2.svg\";","import React, { Component } from 'react';\nimport logo from './iconfinder_weather01_4102328.svg';\nimport './App.css';\n// import './bootstrap.min.css';\nimport \"@ui5/webcomponents/dist/Button\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n          <ui5-button type=\"Default\">Enabled</ui5-button>\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\n// import logo from \"./../../public/weather_icons/cloud_sun_1.svg\"\r\nimport cloud_sun_1 from '../weather_icons/cloud_sun_1.svg';\r\nimport normal_night from '../weather_icons/normal_nihght.svg';\r\nimport heart from '../weather_icons/heart.svg';\r\nimport \"@ui5/webcomponents/dist/List\";\r\nimport \"@ui5/webcomponents/dist/StandardListItem\";\r\nimport \"@ui5/webcomponents/dist/CustomListItem\";\r\nimport \"@ui5/webcomponents/dist/GroupHeaderListItem\";\r\nimport \"@ui5/webcomponents/dist/ShellBar\";\r\nimport * as Constants from \"../utils/Constants\"\r\n\r\n\r\nclass MainPage extends Component {\r\n\r\n\r\n    constructor(props, state) {\r\n        // this.myFunction = this.myFunction.bind(this);\r\n\r\n        super(props, state);\r\n        this.select = React.createRef();\r\n        this.state = {\r\n            isLoaded: false,\r\n            items: \"TEst\"\r\n        }\r\n    }\r\n    prepareData(data) {\r\n        var icon;\r\n        switch (data.currently.icon) {\r\n            case \"clear-night\":\r\n                icon = normal_night;\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n        var newSate = {\r\n            isLoaded: false,\r\n            items: data.currently.summary,\r\n            icon: icon,\r\n            temperature: data.currently.temperature\r\n        }\r\n        return newSate;\r\n    }\r\n\r\n\r\n    changeLocation(event) {\r\n        let location = event.detail.item.innerHTML\r\n\r\n        if (location === \"Brasov\") {\r\n            // alert(\"VLAD\" + location);\r\n            this.setState({\r\n                isLoaded: false,\r\n                items: \"Foarte cald la noi\",\r\n                icon: heart,\r\n                temperature: \"∞\"\r\n            });\r\n        }\r\n        else {\r\n            this.setState({\r\n                isLoaded: false,\r\n                items: \"Unknown yet# Under development\",\r\n                icon: cloud_sun_1,\r\n                temperature: \"\"\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.select.current.addEventListener('itemPress', event => {\r\n            this.changeLocation(event);\r\n\r\n        });\r\n\r\n\r\n        debugger;\r\n        const api = 'https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/a2e9fc452d514f082cc3d7a0adbda5d5/45.64861,%2025.60613?units=si&lang=ro';\r\n        fetch(api)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    debugger;\r\n                    console.table(result)\r\n                    var newSate = this.prepareData(result);\r\n                    this.setState(newSate);\r\n                },\r\n                // Note: it's important to handle errors here\r\n                // instead of a catch() block so that we don't swallow\r\n                // exceptions from actual bugs in components.\r\n                (error) => {\r\n                    debugger;\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        error\r\n                    });\r\n                }\r\n            )\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n\r\n                <ui5-shellbar\r\n                    profile={Constants.ICON_PICTURE}\r\n                    primary-title=\"Weather application\"\r\n                    secondary-title=\"@Vlad Ciobanu\"\r\n                    logo={cloud_sun_1}\r\n                >\r\n                </ui5-shellbar>\r\n\r\n                <div style={{ display: \"-webkit-box\" }} >\r\n                    <div style={{\r\n                        width: \"40%\"\r\n                    }}>\r\n                        <ui5-list id=\"myList\" ref={this.select}>\r\n                            <ui5-li icon=\"sap-icon://functional-location\" type=\"Active\" description=\"Acasa la ei doi\">Brasov</ui5-li>\r\n                            <ui5-li icon=\"sap-icon://functional-location\" type=\"Active\" description=\"Acasa la Cristina\">Targoviste</ui5-li>\r\n                            <ui5-li icon=\"sap-icon://functional-location\" type=\"Active\" description=\"Acasa la Vlad\">Zarnesti</ui5-li>\r\n                            <ui5-li icon=\"sap-icon://functional-location\" type=\"Active\" description=\"Merem la Cluj\">Cluj-Napoca</ui5-li>\r\n                            <ui5-li icon=\"sap-icon://functional-location\" type=\"Active\" description=\"Bucuresti\">Bucuresti</ui5-li>\r\n                            <ui5-li icon=\"sap-icon://functional-location\" type=\"Active\" description=\"Bucuresti\">Berlin</ui5-li>\r\n\r\n\r\n                        </ui5-list>\r\n\r\n                    </div>\r\n                    <div style={{\r\n                        // padding: \"5% 10px 10px\",\r\n                        marginTop: \"auto\",\r\n                        marginRight: \"auto\",\r\n                        marginBottom: \"auto\",\r\n                        marginLeft: \"20%\"\r\n                    }}>\r\n                        <div>Statusul vremii: {this.state.items}</div>\r\n                        <img src={this.state.icon} alt=\"logo\" />\r\n                        <div>Temperatura : {this.state.temperature} °C</div>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainPage","export const ICON_PICTURE = \"https://scontent.fotp3-1.fna.fbcdn.net/v/t1.0-9/13939519_1218182778232415_7113308434780676075_n.jpg?_nc_cat=110&_nc_ht=scontent.fotp3-1.fna&oh=1c6c88457e6d700a8aadcc83531e3561&oe=5D3A77E0\"","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport MainPage from './containers/MainPage'\n\nReactDOM.render(<MainPage />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}